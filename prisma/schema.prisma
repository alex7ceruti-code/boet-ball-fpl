// Boet Ball FPL Companion Database Schema
// User authentication, subscriptions, and preferences

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User authentication and profile
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  password          String?   // For email/password auth
  
  // Email verification
  emailVerificationToken String? @unique
  emailVerificationExpires DateTime?
  
  // Profile information
  fplTeamId         Int?      // User's FPL Team ID
  miniLeague1Id     Int?      // First Mini League ID
  miniLeague2Id     Int?      // Second Mini League ID
  favoriteTeam      Int?      // Premier League team they support
  location          String?   // For South African cultural features
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Subscription and access
  subscriptionType  SubscriptionType @default(FREE)
  subscriptionStart DateTime? 
  subscriptionEnd   DateTime?
  isActive          Boolean   @default(true)
  promoCodeUsed     String?   // Track which promo code was used
  
  // Marketing and communication
  marketingOptIn    Boolean   @default(false)
  lastLoginAt       DateTime?
  loginCount        Int       @default(0)
  
  // Terms acceptance
  termsAcceptedAt   DateTime?
  termsVersion      String?
  
  // Relations
  accounts          Account[]
  sessions          Session[]
  preferences       UserPreferences?
  analytics         UserAnalytics[]
  newsAnalytics     NewsAnalytics[]
  articles          NewsArticle[]
  adminUser         AdminUser?
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// User preferences and settings
model UserPreferences {
  id                    String  @id @default(cuid())
  userId                String  @unique
  
  // Notification preferences
  emailNotifications    Boolean @default(true)
  weeklyReports         Boolean @default(true)
  transferReminders     Boolean @default(true)
  
  // Display preferences
  darkMode              Boolean @default(false)
  compactView           Boolean @default(false)
  showAdvancedStats     Boolean @default(false)
  
  // Cultural preferences
  slangIntensity        SlangIntensity @default(MODERATE)
  showSouthAfricanTime  Boolean @default(true)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_preferences")
}

// User analytics and tracking
model UserAnalytics {
  id             String   @id @default(cuid())
  userId         String
  
  // Page/feature usage
  page           String
  action         String?
  timestamp      DateTime @default(now())
  sessionId      String?
  
  // Additional metadata
  metadata       String?  // JSON string for flexible data
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_analytics")
}

// News and content management
model NewsArticle {
  id            String   @id @default(cuid())
  slug          String   @unique
  title         String
  subtitle      String?
  content       String   // Full article content
  excerpt       String   // Short preview
  coverImage    String?  // URL to cover image
  
  // SEO and metadata
  metaTitle     String?
  metaDescription String?
  tags          String   // Comma-separated tags
  
  // Publishing
  status        ArticleStatus @default(DRAFT)
  publishedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Author info
  authorId      String
  author        User     @relation(fields: [authorId], references: [id])
  
  // Engagement
  views         Int      @default(0)
  likes         Int      @default(0)
  
  // Access control
  isPremium     Boolean  @default(false)
  
  // Analytics
  analytics     NewsAnalytics[]
  
  @@map("news_articles")
}

model NewsAnalytics {
  id        String   @id @default(cuid())
  articleId String
  userId    String?
  
  // Events
  event     AnalyticsEvent
  timestamp DateTime @default(now())
  metadata  String?  // JSON string for additional data
  
  // Relations
  article   NewsArticle @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@map("news_analytics")
}

// Admin system
model AdminUser {
  id          String   @id @default(cuid())
  userId      String   @unique
  role        AdminRole @default(EDITOR)
  permissions String   // JSON string of permissions
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("admin_users")
}

// Promo code system for future premium features
model PromoCode {
  id            String   @id @default(cuid())
  code          String   @unique
  description   String?
  discountType  DiscountType
  discountValue Int      // Percentage or amount in cents
  
  // Usage limits
  maxUses       Int?     // NULL = unlimited
  currentUses   Int      @default(0)
  
  // Validity
  validFrom     DateTime @default(now())
  validUntil    DateTime?
  isActive      Boolean  @default(true)
  
  // Restrictions
  newUsersOnly  Boolean  @default(false)
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@map("promo_codes")
}

// Enums
enum SubscriptionType {
  FREE
  PREMIUM
}

enum SlangIntensity {
  NONE
  LIGHT
  MODERATE
  HEAVY
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum AnalyticsEvent {
  VIEW
  LIKE
  SHARE
  CLICK
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  EDITOR
  WRITER
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_TRIAL
}
